E/20/280
Lab 5 Discussion Questions

1. State whether each Task API operation is idempotent along with an explanation.

addTask: Not idempotent – Adding the same task multiple times results in multiple different tasks with unique IDs.
editTask: Idempotent – Editing a task with the same data multiple times does not change the outcome beyond the first edit.
deleteTask: Idempotent – Deleting the same task multiple times has the same effect as deleting it once.
listTasks: Idempotent – Listing tasks does not modify state, so repeated calls produce the same result if no tasks are modified in between.

2. Add error handling to the Task API RPCs to ensure the following.
    Task descriptions must be less than MAXLEN=1024 characters.
    Task IDs must be valid.
Return suitable status codes and messages if these conditions are violated.


3. Why is it necessary to implement the checks stated above?
Preventing too long task descriptions ensures data consistency and avoids unexpected behavior.
Checking for valid task IDs prevents clients from modifying and/or retrieving nonexistent tasks, reducing errors and improving reliability.


4. Complete TaskapiImpl.__enter__ and TaskapiImpl.__exit__ to save and load tasks to and from a file.





5. Implement TaskapiImpl.editTask RPC that edits an existing task.




6. What happens if editTask is called on the same task by two clients simultaneously? Suggest a possible solution.

A race condition could occur where the both clients overwrite each other’s changes unpredictably(lost updates).
Solution: Use a lock to ensure that only one client edits a task at a time. so the time works as a unique ID.


7. There is a subtle error in the provided implementation of Taskimpl.addTask called a data race. How can we fix this problem?
The issue arises because multiple threads may try to add tasks simultaneously, leading to inconsistent task_id values or overwriting tasks.
Solution: Use a lock to ensure only one thread updates task_id and tasks at a time


8. A student writes the following code to prevent the data race in addTask. Explain why their code does NOT ensure mutual exclusion.

threading.Lock() creates a new lock object every time, rather than using a shared lock instance.
Solution: Use a lock initialized in __init__ and reuse it in addTask.

Corrected version:
class TaskapiImpl:
    def __init__(self, taskfile: str):
        self.lock = threading.Lock() #lock before

    def addTask(self, request: StringValue, context) -> task_pb2.Task:
        with self.lock:
            t = task_pb2.Task(id=self.task_id, description=request.value)
            self.tasks[self.task_id] = t
            self.task_id += 1
            return t

9. Impose a critical section within your implementation of addTask to ensure proper mutual exclusion.
    
    with self.lock:
        t = task_pb2.Task(id=self.task_id, description=request.value)
        self.tasks[self.task_id] = t
        self.task_id += 1
        return t

The with self.lock: ensures that only one thread modifies task_id and tasks at a time


10. Does code in Taskimpl.listTasks need a critical section? Explain why (not?)

No, listTasks do not modify tasks, it only reads them.
Python dictionary reads are atomic, so race conditions do not occur when reading.
However, if another thread modifies tasks while listTasks is running, it could lead to inconsistencies.
Solution: Use a lock when listing tasks only if consistency across multiple requests is required.

